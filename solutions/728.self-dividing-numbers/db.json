{"java":"/*\r\n * [728] Self Dividing Numbers\r\n *\r\n * https://leetcode.com/problems/self-dividing-numbers/description/\r\n *\r\n * algorithms\r\n * Easy (66.81%)\r\n * Total Accepted:    27.4K\r\n * Total Submissions: 41K\r\n * Testcase Example:  '1\\n22'\r\n *\r\n * \r\n * A self-dividing number is a number that is divisible by every digit it\r\n * contains.\r\n * \r\n * For example, 128 is a self-dividing number because 128 % 1 == 0, 128 % 2 ==\r\n * 0, and 128 % 8 == 0.\r\n * \r\n * Also, a self-dividing number is not allowed to contain the digit zero.\r\n * \r\n * Given a lower and upper number bound, output a list of every possible self\r\n * dividing number, including the bounds if possible.\r\n * \r\n * Example 1:\r\n * \r\n * Input: \r\n * left = 1, right = 22\r\n * Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\r\n * \r\n * \r\n * \r\n * Note:\r\n * The boundaries of each input argument are 1 .\r\n * \r\n */\r\nclass Solution {\r\n    public List<Integer> selfDividingNumbers(int left, int right) {\r\n        List<Integer> nums = new ArrayList();\r\n        for(int i = left; i <= right; i++){\r\n            if(selfDividing(i)) nums.add(i);\r\n        }\r\n        return nums;\r\n    }\r\n    \r\n    public boolean selfDividing(int n){\r\n        int x = n;\r\n\t\twhile (x > 0) {\r\n\t\t\tint r = x % 10;\r\n\t\t\tx /= 10;\r\n\t\t\tif (r == 0 || n % r > 0)\r\n\t\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n    }\r\n    \r\n    /*\r\n    Alternate implementation of selfDividing:\r\n    public boolean selfDividing(int n) {\r\n        for (char c: String.valueOf(n).toCharArray()) {\r\n            if (c == '0' || (n % (c - '0') > 0))\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n    */\r\n}\r\n"}