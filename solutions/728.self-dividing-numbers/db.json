{
  "java": "/*\n * [728] Self Dividing Numbers\n *\n * https://leetcode.com/problems/self-dividing-numbers/description/\n *\n * algorithms\n * Easy (66.81%)\n * Total Accepted:    27.4K\n * Total Submissions: 41K\n * Testcase Example:  '1\\n22'\n *\n * \n * A self-dividing number is a number that is divisible by every digit it\n * contains.\n * \n * For example, 128 is a self-dividing number because 128 % 1 == 0, 128 % 2 ==\n * 0, and 128 % 8 == 0.\n * \n * Also, a self-dividing number is not allowed to contain the digit zero.\n * \n * Given a lower and upper number bound, output a list of every possible self\n * dividing number, including the bounds if possible.\n * \n * Example 1:\n * \n * Input: \n * left = 1, right = 22\n * Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n * \n * \n * \n * Note:\n * The boundaries of each input argument are 1 .\n * \n */\nclass Solution {\n    public List<Integer> selfDividingNumbers(int left, int right) {\n        List<Integer> nums = new ArrayList();\n        for(int i = left; i <= right; i++){\n            if(selfDividing(i)) nums.add(i);\n        }\n        return nums;\n    }\n    \n    public boolean selfDividing(int n){\n        int x = n;\n\t\twhile (x > 0) {\n\t\t\tint r = x % 10;\n\t\t\tx /= 10;\n\t\t\tif (r == 0 || n % r > 0)\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n    }\n    \n    /*\n    Alternate implementation of selfDividing:\n    public boolean selfDividing(int n) {\n        for (char c: String.valueOf(n).toCharArray()) {\n            if (c == '0' || (n % (c - '0') > 0))\n                return false;\n        }\n        return true;\n    }\n    */\n}\n"
}