{
  "java": "/*\n * [167] Two Sum II - Input array is sorted\n *\n * https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/description/\n *\n * algorithms\n * Easy (47.25%)\n * Total Accepted:    130K\n * Total Submissions: 275.2K\n * Testcase Example:  '[2,3,4]\\n6'\n *\n * Given an array of integers that is already sorted in ascending order, find\n * two numbers such that they add up to a specific target number.\n * \n * The function twoSum should return indices of the two numbers such that they\n * add up to the target, where index1 must be less than index2. Please note\n * that your returned answers (both index1 and index2) are not zero-based.\n * \n * You may assume that each input would have exactly one solution and you may\n * not use the same element twice.\n * \n * \n * Input: numbers={2, 7, 11, 15}, target=9\n * Output: index1=1, index2=2\n * \n */\nclass Solution {\n    public int[] twoSum(int[] numbers, int target) {\n        int l = 0, r = numbers.length -1;\n        while(numbers[l] + numbers[r] != target) {\n            if(numbers[l] + numbers[r] > target) r --;\n            else l ++;\n        }\n        return new int[] {l + 1, r + 1};\n    }\n}\n"
}