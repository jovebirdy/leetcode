{"java":"/*\r\n * [167] Two Sum II - Input array is sorted\r\n *\r\n * https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/description/\r\n *\r\n * algorithms\r\n * Easy (47.25%)\r\n * Total Accepted:    130K\r\n * Total Submissions: 275.2K\r\n * Testcase Example:  '[2,3,4]\\n6'\r\n *\r\n * Given an array of integers that is already sorted in ascending order, find\r\n * two numbers such that they add up to a specific target number.\r\n * \r\n * The function twoSum should return indices of the two numbers such that they\r\n * add up to the target, where index1 must be less than index2. Please note\r\n * that your returned answers (both index1 and index2) are not zero-based.\r\n * \r\n * You may assume that each input would have exactly one solution and you may\r\n * not use the same element twice.\r\n * \r\n * \r\n * Input: numbers={2, 7, 11, 15}, target=9\r\n * Output: index1=1, index2=2\r\n * \r\n */\r\nclass Solution {\r\n    public int[] twoSum(int[] numbers, int target) {\r\n        int l = 0, r = numbers.length -1;\r\n        while(numbers[l] + numbers[r] != target) {\r\n            if(numbers[l] + numbers[r] > target) r --;\r\n            else l ++;\r\n        }\r\n        return new int[] {l + 1, r + 1};\r\n    }\r\n}\r\n"}