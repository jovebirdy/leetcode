{"java":"/*\r\n * [561] Array Partition I\r\n *\r\n * https://leetcode.com/problems/array-partition-i/description/\r\n *\r\n * algorithms\r\n * Easy (66.32%)\r\n * Total Accepted:    72.5K\r\n * Total Submissions: 109.4K\r\n * Testcase Example:  '[1,4,3,2]'\r\n *\r\n * \r\n * Given an array of 2n integers, your task is to group these integers into n\r\n * pairs of integer, say (a1, b1), (a2, b2), ..., (an, bn) which makes sum of\r\n * min(ai, bi) for all i from 1 to n as large as possible.\r\n * \r\n * \r\n * Example 1:\r\n * \r\n * Input: [1,4,3,2]\r\n * \r\n * Output: 4\r\n * Explanation: n is 2, and the maximum sum of pairs is 4 = min(1, 2) + min(3,\r\n * 4).\r\n * \r\n * \r\n * \r\n * Note:\r\n * \r\n * n is a positive integer, which is in the range of [1, 10000].\r\n * All the integers in the array will be in the range of [-10000, 10000].\r\n * \r\n * \r\n */\r\nclass Solution {\r\n    public int arrayPairSum(int[] nums) {\r\n        Arrays.sort(nums);\r\n        int sum = 0;\r\n        for(int k = 0; k < nums.length; k = k+2){\r\n            sum += nums[k];\r\n        }\r\n        return sum;\r\n    }\r\n}\r\n"}