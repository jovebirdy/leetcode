{
  "java": "/*\n * [561] Array Partition I\n *\n * https://leetcode.com/problems/array-partition-i/description/\n *\n * algorithms\n * Easy (66.32%)\n * Total Accepted:    72.5K\n * Total Submissions: 109.4K\n * Testcase Example:  '[1,4,3,2]'\n *\n * \n * Given an array of 2n integers, your task is to group these integers into n\n * pairs of integer, say (a1, b1), (a2, b2), ..., (an, bn) which makes sum of\n * min(ai, bi) for all i from 1 to n as large as possible.\n * \n * \n * Example 1:\n * \n * Input: [1,4,3,2]\n * \n * Output: 4\n * Explanation: n is 2, and the maximum sum of pairs is 4 = min(1, 2) + min(3,\n * 4).\n * \n * \n * \n * Note:\n * \n * n is a positive integer, which is in the range of [1, 10000].\n * All the integers in the array will be in the range of [-10000, 10000].\n * \n * \n */\nclass Solution {\n    public int arrayPairSum(int[] nums) {\n        Arrays.sort(nums);\n        int sum = 0;\n        for(int k = 0; k < nums.length; k = k+2){\n            sum += nums[k];\n        }\n        return sum;\n    }\n}\n"
}