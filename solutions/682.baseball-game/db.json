{"java":"/*\r\n * [682] Baseball Game\r\n *\r\n * https://leetcode.com/problems/baseball-game/description/\r\n *\r\n * algorithms\r\n * Easy (57.99%)\r\n * Total Accepted:    21.9K\r\n * Total Submissions: 37.7K\r\n * Testcase Example:  '[\"5\",\"2\",\"C\",\"D\",\"+\"]'\r\n *\r\n * \r\n * You're now a baseball game point recorder.\r\n * \r\n * \r\n * \r\n * Given a list of strings, each string can be one of the 4 following types:\r\n * \r\n * Integer (one round's score): Directly represents the number of points you\r\n * get in this round.\r\n * \"+\" (one round's score): Represents that the points you get in this round\r\n * are the sum of the last two valid round's points.\r\n * \"D\" (one round's score): Represents that the points you get in this round\r\n * are the doubled data of the last valid round's points.\r\n * \"C\" (an operation, which isn't a round's score): Represents the last valid\r\n * round's points you get were invalid and should be removed.\r\n * \r\n * \r\n * \r\n * \r\n * Each round's operation is permanent and could have an impact on the round\r\n * before and the round after.\r\n * \r\n * \r\n * \r\n * You need to return the sum of the points you could get in all the rounds.\r\n * \r\n * \r\n * Example 1:\r\n * \r\n * Input: [\"5\",\"2\",\"C\",\"D\",\"+\"]\r\n * Output: 30\r\n * Explanation: \r\n * Round 1: You could get 5 points. The sum is: 5.\r\n * Round 2: You could get 2 points. The sum is: 7.\r\n * Operation 1: The round 2's data was invalid. The sum is: 5.  \r\n * Round 3: You could get 10 points (the round 2's data has been removed). The\r\n * sum is: 15.\r\n * Round 4: You could get 5 + 10 = 15 points. The sum is: 30.\r\n * \r\n * \r\n * \r\n * Example 2:\r\n * \r\n * Input: [\"5\",\"-2\",\"4\",\"C\",\"D\",\"9\",\"+\",\"+\"]\r\n * Output: 27\r\n * Explanation: \r\n * Round 1: You could get 5 points. The sum is: 5.\r\n * Round 2: You could get -2 points. The sum is: 3.\r\n * Round 3: You could get 4 points. The sum is: 7.\r\n * Operation 1: The round 3's data is invalid. The sum is: 3.  \r\n * Round 4: You could get -4 points (the round 3's data has been removed). The\r\n * sum is: -1.\r\n * Round 5: You could get 9 points. The sum is: 8.\r\n * Round 6: You could get -4 + 9 = 5 points. The sum is 13.\r\n * Round 7: You could get 9 + 5 = 14 points. The sum is 27.\r\n * \r\n * \r\n * \r\n * Note:\r\n * The size of the input list will be between 1 and 1000.\r\n * Every integer represented in the list will be between -30000 and 30000.\r\n * \r\n */\r\nclass Solution {\r\n    public int calPoints(String[] ops) {\r\n        int sum = Integer.parseInt(ops[0]);\r\n        ArrayList<Integer> list = new ArrayList<Integer>();\r\n        list.add(Integer.parseInt(ops[0]));\r\n        for(int i = 1; i < ops.length; i++){\r\n            switch(ops[i]){\r\n                case \"D\" : list.add(list.get(list.size()-1)*2); sum += list.get(list.size()-1); break;\r\n                case \"C\" : sum -= list.get(list.size()-1); list.remove(list.size()-1); break;\r\n                case \"+\" : list.add(list.get(list.size()-1) + list.get(list.size()-2)); sum += list.get(list.size()-1); break;\r\n                default  : list.add(Integer.parseInt(ops[i])); sum += list.get(list.size()-1);\r\n            }\r\n        }\r\n        return sum;\r\n    }\r\n}\r\n"}