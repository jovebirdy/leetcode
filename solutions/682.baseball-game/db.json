{
  "java": "/*\n * [682] Baseball Game\n *\n * https://leetcode.com/problems/baseball-game/description/\n *\n * algorithms\n * Easy (57.99%)\n * Total Accepted:    21.9K\n * Total Submissions: 37.7K\n * Testcase Example:  '[\"5\",\"2\",\"C\",\"D\",\"+\"]'\n *\n * \n * You're now a baseball game point recorder.\n * \n * \n * \n * Given a list of strings, each string can be one of the 4 following types:\n * \n * Integer (one round's score): Directly represents the number of points you\n * get in this round.\n * \"+\" (one round's score): Represents that the points you get in this round\n * are the sum of the last two valid round's points.\n * \"D\" (one round's score): Represents that the points you get in this round\n * are the doubled data of the last valid round's points.\n * \"C\" (an operation, which isn't a round's score): Represents the last valid\n * round's points you get were invalid and should be removed.\n * \n * \n * \n * \n * Each round's operation is permanent and could have an impact on the round\n * before and the round after.\n * \n * \n * \n * You need to return the sum of the points you could get in all the rounds.\n * \n * \n * Example 1:\n * \n * Input: [\"5\",\"2\",\"C\",\"D\",\"+\"]\n * Output: 30\n * Explanation: \n * Round 1: You could get 5 points. The sum is: 5.\n * Round 2: You could get 2 points. The sum is: 7.\n * Operation 1: The round 2's data was invalid. The sum is: 5.  \n * Round 3: You could get 10 points (the round 2's data has been removed). The\n * sum is: 15.\n * Round 4: You could get 5 + 10 = 15 points. The sum is: 30.\n * \n * \n * \n * Example 2:\n * \n * Input: [\"5\",\"-2\",\"4\",\"C\",\"D\",\"9\",\"+\",\"+\"]\n * Output: 27\n * Explanation: \n * Round 1: You could get 5 points. The sum is: 5.\n * Round 2: You could get -2 points. The sum is: 3.\n * Round 3: You could get 4 points. The sum is: 7.\n * Operation 1: The round 3's data is invalid. The sum is: 3.  \n * Round 4: You could get -4 points (the round 3's data has been removed). The\n * sum is: -1.\n * Round 5: You could get 9 points. The sum is: 8.\n * Round 6: You could get -4 + 9 = 5 points. The sum is 13.\n * Round 7: You could get 9 + 5 = 14 points. The sum is 27.\n * \n * \n * \n * Note:\n * The size of the input list will be between 1 and 1000.\n * Every integer represented in the list will be between -30000 and 30000.\n * \n */\nclass Solution {\n    public int calPoints(String[] ops) {\n        int sum = Integer.parseInt(ops[0]);\n        ArrayList<Integer> list = new ArrayList<Integer>();\n        list.add(Integer.parseInt(ops[0]));\n        for(int i = 1; i < ops.length; i++){\n            switch(ops[i]){\n                case \"D\" : list.add(list.get(list.size()-1)*2); sum += list.get(list.size()-1); break;\n                case \"C\" : sum -= list.get(list.size()-1); list.remove(list.size()-1); break;\n                case \"+\" : list.add(list.get(list.size()-1) + list.get(list.size()-2)); sum += list.get(list.size()-1); break;\n                default  : list.add(Integer.parseInt(ops[i])); sum += list.get(list.size()-1);\n            }\n        }\n        return sum;\n    }\n}\n"
}