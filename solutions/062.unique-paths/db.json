{"python":"#\r\n# [62] Unique Paths\r\n#\r\n# https://leetcode.com/problems/unique-paths/description/\r\n#\r\n# algorithms\r\n# Medium (42.68%)\r\n# Total Accepted:    184.6K\r\n# Total Submissions: 432.6K\r\n# Testcase Example:  '1\\n2'\r\n#\r\n# A robot is located at the top-left corner of a m x n grid (marked 'Start' in\r\n# the diagram below).\r\n# \r\n# The robot can only move either down or right at any point in time. The robot\r\n# is trying to reach the bottom-right corner of the grid (marked 'Finish' in\r\n# the diagram below).\r\n# \r\n# How many possible unique paths are there?\r\n# \r\n# \r\n# \r\n# Above is a 3 x 7 grid. How many possible unique paths are there?\r\n# \r\n# \r\n# Note: m and n will be at most 100.\r\n#\r\nclass Solution:\r\n    def uniquePaths(self, m, n):\r\n        \"\"\"\r\n        :type m: int\r\n        :type n: int\r\n        :rtype: int\r\n        \"\"\"\r\n        return int(math.factorial(m+n-2)/math.factorial(m-1)/math.factorial(n-1))\r\n"}