{
  "java": "/*\n * [617] Merge Two Binary Trees\n *\n * https://leetcode.com/problems/merge-two-binary-trees/description/\n *\n * algorithms\n * Easy (67.35%)\n * Total Accepted:    76.1K\n * Total Submissions: 113K\n * Testcase Example:  '[1,3,2,5]\\n[2,1,3,null,4,null,7]'\n *\n * \n * Given two binary trees and imagine that when you put one of them to cover\n * the other, some nodes of the two trees are overlapped while the others are\n * not. \n * \n * \n * You need to merge them into a new binary tree. The merge rule is that if two\n * nodes overlap, then sum node values up as the new value of the merged node.\n * Otherwise, the NOT null node will be used as the node of new tree.\n * \n * \n * \n * Example 1:\n * \n * Input: \n * Tree 1                     Tree 2                  \n * \u2060         1                         2                             \n * \u2060        / \\                       / \\                            \n * \u2060       3   2                     1   3                        \n * \u2060      /                           \\   \\                      \n * \u2060     5                             4   7                  \n * Output: \n * Merged tree:\n * 3\n * / \\\n * 4   5\n * / \\   \\ \n * 5   4   7\n * \n * \n * \n * \n * Note:\n * The merging process must start from the root nodes of both trees.\n * \n * \n */\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public TreeNode mergeTrees(TreeNode t1, TreeNode t2) {\n        if(t1 == null){\n            return t2;\n        }\n        if(t2 == null){\n            return t1;\n        }\n        t1.val = t1.val + t2.val;\n        t1.left = mergeTrees(t1.left, t2.left);\n        t1.right = mergeTrees(t1.right, t2.right);\n        return t1;\n    }\n}\n"
}