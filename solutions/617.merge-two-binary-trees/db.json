{"java":"/*\r\n * [617] Merge Two Binary Trees\r\n *\r\n * https://leetcode.com/problems/merge-two-binary-trees/description/\r\n *\r\n * algorithms\r\n * Easy (67.35%)\r\n * Total Accepted:    76.1K\r\n * Total Submissions: 113K\r\n * Testcase Example:  '[1,3,2,5]\\n[2,1,3,null,4,null,7]'\r\n *\r\n * \r\n * Given two binary trees and imagine that when you put one of them to cover\r\n * the other, some nodes of the two trees are overlapped while the others are\r\n * not. \r\n * \r\n * \r\n * You need to merge them into a new binary tree. The merge rule is that if two\r\n * nodes overlap, then sum node values up as the new value of the merged node.\r\n * Otherwise, the NOT null node will be used as the node of new tree.\r\n * \r\n * \r\n * \r\n * Example 1:\r\n * \r\n * Input: \r\n * Tree 1                     Tree 2                  \r\n * ⁠         1                         2                             \r\n * ⁠        / \\                       / \\                            \r\n * ⁠       3   2                     1   3                        \r\n * ⁠      /                           \\   \\                      \r\n * ⁠     5                             4   7                  \r\n * Output: \r\n * Merged tree:\r\n * 3\r\n * / \\\r\n * 4   5\r\n * / \\   \\ \r\n * 5   4   7\r\n * \r\n * \r\n * \r\n * \r\n * Note:\r\n * The merging process must start from the root nodes of both trees.\r\n * \r\n * \r\n */\r\n/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     int val;\r\n *     TreeNode left;\r\n *     TreeNode right;\r\n *     TreeNode(int x) { val = x; }\r\n * }\r\n */\r\nclass Solution {\r\n    public TreeNode mergeTrees(TreeNode t1, TreeNode t2) {\r\n        if(t1 == null){\r\n            return t2;\r\n        }\r\n        if(t2 == null){\r\n            return t1;\r\n        }\r\n        t1.val = t1.val + t2.val;\r\n        t1.left = mergeTrees(t1.left, t2.left);\r\n        t1.right = mergeTrees(t1.right, t2.right);\r\n        return t1;\r\n    }\r\n}\r\n"}