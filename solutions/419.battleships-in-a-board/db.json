{"java":"/*\r\n * [419] Battleships in a Board\r\n *\r\n * https://leetcode.com/problems/battleships-in-a-board/description/\r\n *\r\n * algorithms\r\n * Medium (62.97%)\r\n * Total Accepted:    41K\r\n * Total Submissions: 65.2K\r\n * Testcase Example:  '[[\"X\",\".\",\".\",\"X\"],[\".\",\".\",\".\",\"X\"],[\".\",\".\",\".\",\"X\"]]'\r\n *\r\n * Given an 2D board, count how many battleships are in it. The battleships are\r\n * represented with 'X's, empty slots are represented with '.'s. You may assume\r\n * the following rules:\r\n * \r\n * \r\n * You receive a valid board, made of only battleships or empty slots.\r\n * Battleships can only be placed horizontally or vertically. In other words,\r\n * they can only be made of the shape 1xN (1 row, N columns) or Nx1 (N rows, 1\r\n * column), where N can be of any size.\r\n * At least one horizontal or vertical cell separates between two battleships -\r\n * there are no adjacent battleships.\r\n * \r\n * \r\n * Example:\r\n * X..X\r\n * ...X\r\n * ...X\r\n * \r\n * In the above board there are 2 battleships.\r\n * \r\n * Invalid Example:\r\n * ...X\r\n * XXXX\r\n * ...X\r\n * \r\n * This is an invalid board that you will not receive - as battleships will\r\n * always have a cell separating between them.\r\n * \r\n * Follow up:Could you do it in one-pass, using only O(1) extra memory and\r\n * without modifying the value of the board?\r\n */\r\nclass Solution {\r\n    public int countBattleships(char[][] board) {\r\n        if (board == null || board.length == 0 || board[0].length == 0) return 0;\r\n\tint R = board.length, C = board[0].length, cnt = 0;\r\n\tfor (int i = 0; i < R; i++) {\r\n\t\tfor (int j = 0; j < C; j++) {\r\n\t\t\tif (board[i][j] == 'X' && (i == 0 || board[i - 1][j] == '.') && (j == 0 || board[i][j - 1] == '.'))\r\n\t\t\t\tcnt++;\r\n\t\t}\r\n\t}\r\n\t\r\n\treturn cnt;\r\n    }\r\n}\r\n"}