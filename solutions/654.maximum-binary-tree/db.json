{
  "java": "/*\n * [654] Maximum Binary Tree\n *\n * https://leetcode.com/problems/maximum-binary-tree/description/\n *\n * algorithms\n * Medium (69.61%)\n * Total Accepted:    28.4K\n * Total Submissions: 40.9K\n * Testcase Example:  '[3,2,1,6,0,5]'\n *\n * \n * Given an integer array with no duplicates. A maximum tree building on this\n * array is defined as follow:\n * \n * The root is the maximum number in the array. \n * The left subtree is the maximum tree constructed from left part subarray\n * divided by the maximum number.\n * The right subtree is the maximum tree constructed from right part subarray\n * divided by the maximum number. \n * \n * \n * \n * \n * Construct the maximum tree by the given array and output the root node of\n * this tree.\n * \n * \n * Example 1:\n * \n * Input: [3,2,1,6,0,5]\n * Output: return the tree root node representing the following tree:\n * \n * \u2060     6\n * \u2060   /   \\\n * \u2060  3     5\n * \u2060   \\    / \n * \u2060    2  0   \n * \u2060      \\\n * \u2060       1\n * \n * \n * \n * Note:\n * \n * The size of the given array will be in the range [1,1000].\n * \n * \n */\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public TreeNode constructMaximumBinaryTree(int[] nums) {\n\t\tif (nums == null)\n\t\t\treturn null;\n\t\treturn construct(nums, 0, nums.length - 1);\n\t}\n\n\tpublic TreeNode construct(int[] nums, int start, int end) {\n\t\tif (start > end)\n\t\t\treturn null;\n\t\tint max_idx = start;\n\t\tfor (int i = start + 1; i <= end; i++) {\n\t\t\tif (nums[i] > nums[max_idx])\n\t\t\t\tmax_idx = i;\n\t\t}\n\t\tTreeNode node = new TreeNode(nums[max_idx]);\n\t\tnode.left = construct(nums, start, max_idx - 1);\n\t\tnode.right = construct(nums, max_idx + 1, end);\n\t\treturn node;\n\t}\n}\n"
}