{
  "java": "/*\n * [53] Maximum Subarray\n *\n * https://leetcode.com/problems/maximum-subarray/description/\n *\n * algorithms\n * Easy (40.25%)\n * Total Accepted:    296.5K\n * Total Submissions: 736.4K\n * Testcase Example:  '[-2,1,-3,4,-1,2,1,-5,4]'\n *\n *\n * Find the contiguous subarray within an array (containing at least one\n * number) which has the largest sum.\n *\n *\n * For example, given the array [-2,1,-3,4,-1,2,1,-5,4],\n * the contiguous subarray [4,-1,2,1] has the largest sum = 6.\n *\n *\n * click to show more practice.\n *\n * More practice:\n *\n * If you have figured out the O(n) solution, try coding another solution using\n * the divide and conquer approach, which is more subtle.\n *\n */\nclass Solution {\n    public int maxSubArray(int[] nums) {\n        int max = Integer.MIN_VALUE, sum = 0;\n        for(int i = 0; i < nums.length; i++) {\n          sum = nums[i] + (sum < 0 ? 0 : sum);\n          max = sum > max ? sum : max;\n        }\n        return max;\n    }\n}\n"
}