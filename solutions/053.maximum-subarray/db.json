{"java":"/*\r\n * [53] Maximum Subarray\r\n *\r\n * https://leetcode.com/problems/maximum-subarray/description/\r\n *\r\n * algorithms\r\n * Easy (40.25%)\r\n * Total Accepted:    296.5K\r\n * Total Submissions: 736.4K\r\n * Testcase Example:  '[-2,1,-3,4,-1,2,1,-5,4]'\r\n *\r\n *\r\n * Find the contiguous subarray within an array (containing at least one\r\n * number) which has the largest sum.\r\n *\r\n *\r\n * For example, given the array [-2,1,-3,4,-1,2,1,-5,4],\r\n * the contiguous subarray [4,-1,2,1] has the largest sum = 6.\r\n *\r\n *\r\n * click to show more practice.\r\n *\r\n * More practice:\r\n *\r\n * If you have figured out the O(n) solution, try coding another solution using\r\n * the divide and conquer approach, which is more subtle.\r\n *\r\n */\r\nclass Solution {\r\n    public int maxSubArray(int[] nums) {\r\n        int max = Integer.MIN_VALUE, sum = 0;\r\n        for(int i = 0; i < nums.length; i++) {\r\n          sum = nums[i] + (sum < 0 ? 0 : sum);\r\n          max = sum > max ? sum : max;\r\n        }\r\n        return max;\r\n    }\r\n}\r\n"}