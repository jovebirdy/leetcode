{"java":"/*\r\n * [3] Longest Substring Without Repeating Characters\r\n *\r\n * https://leetcode.com/problems/longest-substring-without-repeating-characters/description/\r\n *\r\n * algorithms\r\n * Medium (24.66%)\r\n * Total Accepted:    458.4K\r\n * Total Submissions: 1.9M\r\n * Testcase Example:  '\"abcabcbb\"'\r\n *\r\n * Given a string, find the length of the longest substring without repeating\r\n * characters.\r\n * \r\n * Examples:\r\n * \r\n * Given \"abcabcbb\", the answer is \"abc\", which the length is 3.\r\n * \r\n * Given \"bbbbb\", the answer is \"b\", with the length of 1.\r\n * \r\n * Given \"pwwkew\", the answer is \"wke\", with the length of 3. Note that the\r\n * answer must be a substring, \"pwke\" is a subsequence and not a substring.\r\n */\r\nclass Solution {\r\n    public int lengthOfLongestSubstring(String s) {\r\n\t\tif (s.length() == 0)\r\n\t\t\treturn 0;\r\n\t\tHashMap<Character, Integer> map = new HashMap<Character, Integer>();\r\n\t\tint max = 0;\r\n\t\tfor (int i = 0, j = 0; i < s.length(); ++i) {\r\n\t\t\tif (map.containsKey(s.charAt(i))) {\r\n\t\t\t\tj = Math.max(j, map.get(s.charAt(i)) + 1);\r\n\t\t\t}\r\n\t\t\tmap.put(s.charAt(i), i);\r\n\t\t\tmax = Math.max(max, i - j + 1);\r\n\t\t}\r\n\t\treturn max;\r\n\t}\r\n}\r\n"}